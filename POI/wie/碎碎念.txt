我应该是做过这道题的
不过早就忘了做法了

今天就当重做一遍吧

既然要给出方案是不是构造呢？

首先不管一定要在矩形内的限制的话
我们只要给出一个全排列就行了

限制就要求我们挑选出一个合适的全排列

满足每个矩形内恰有一个车

矩形(a,b)(c,d)的限制
就是在区间a~b中恰有一个数字属于[c,d]
这个好像网络流啊

我们每个数字只能用一次
然后每个区间中恰有某个范围内的一个数字

那么对于数字i，把它连向所有范围内包含它的区间
同时设置一个s连所有i，
然后所有区间连一边到t
然后我们就是求一个从s->t能输送n流量的方案

发现复杂度太高了，只能留着对拍了

是什么神奇的建模方法吗？

正解不是网络流

原来我们的转化似乎是干扰了我们的思路。
我们可以把问题用一个一维的问题代替。

我们把矩形向x轴投影得到若干个区间
我们的任务是向n个区间内放n个点，其中每个点只属于一个区间（即使它可能也被别的区间覆盖）

这个怎么做呢？
我们把区间排序后（根据本题的特点，应该先按照L从小到大排序，再按照R从小到大排序）
从1~n扫描每个点，枚举到i的时候
把所以以i为L的区间入队，然后我们该如何放置i呢？
我们应该把i放置在当前队列中R最小的那个区间里
否则如果在另外的可行方案中，我们把i放置在别的区间里，那么我们把新方案中放置在R最小的那个区间里的点和
i交换也可以得到一个可行解。
而且更多情况下如果我们不把i放置在R最小的区间内，就没别的可行方案了

所以我们这样放，然后如果枚举到i的时候原来队列中的一些区间可能已经走出去了
这样一定无解。这些区间中就没有放置过点。

这样对于x轴我们就处理出来了每个矩形中应该放的点的x的坐标
然后对于y轴再独立做一遍就得到了每个矩形中的(x,y)

可以拆分成两个独立的一维问题是我没有想到的

这个问题和我们之间做的转化之间可以建立什么联系呢？

注意到我们处理这个问题的时候分两步来确定一个点

原来的转化中，矩形(a,b)(c,d)的限制
就是在区间a~b中恰有一个数字属于[c,d]

这里面有两个参数我们是不知道的，也就是a~b中恰有一个满足XXX
到底是a~b中的哪一个？
还有满足了属于[c,d]，又到底是[c,d]中的哪一个？

等等，发现我们做的转化是错误
在矩形中如果两个矩形重叠部分里放点，我们是自行规定划分到哪个矩形里的

而我们的转化其实是要求不能有重叠。
所以转化就错了。

正确的转化应该是
对1~n，每个点去对应一个形如(a,b,c,d)的条件
对应的条件是这个点的下标在区间[a,b]内并且范围在[c,d]内

如果可以有一个一一对应的方案就输出它

然后继续使用交换法
这次可以直接想二维的

如果我们枚举第i个下标，
我们不需要直接考虑我们应该放哪个数字
而是考虑我们应该对应到哪个条件？
还是会得到要先对应到区间R最小的那个

因为如果我们放置了x（我们不清楚x是多少）在区间R不是最小的那个(a,b,c,d)中
那么我们一定放置了别的数字y在区间R最小的(a,b,c,d)中
这样的话我们交换x和y，同时交换对应，
这样一定可行，因为两个(a,b,c,d)都覆盖下标i，所以我们可以交换对应

因为我们连数值也交换了，所以对应的(a,b,c,d)还是满足的

所以我们可以统一起来放到R最小的。

回过头来看我们为什么可以单独处理x轴和y轴
所谓单独处理x轴，其实就是处理出每个x应该对应哪个矩形
我们之所以可以不管y的取值这样做，是因为我们证明了如果之前方案可行，
那么不管y的取值，只要交换对应同时交换y值，就是可行方案。